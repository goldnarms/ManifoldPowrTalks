{
  "name": "ManifoldCordova",
  "version": "0.0.4",
  "description": "This package is to be used as a workaround to be consumed fromt he ManifestJS tool. Its a Cordova plugin.",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/manifoldjs/ManifoldCordova.git"
  },
  "keywords": [
    "Cordova",
    "plugin",
    "hosted",
    "web",
    "manifest"
  ],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/manifoldjs/ManifoldCordova/issues"
  },
  "homepage": "https://github.com/manifoldjs/ManifoldCordova",
  "readme": "﻿<!---\r\n license: MIT License\r\n-->\r\n\r\n# Hosted Web Application\r\nThis plugin enables the creation of a hosted web application from a [W3C manifest](http://www.w3.org/2008/webapps/manifest/) that provides metadata associated with a web site. It uses properties in the manifest to update corresponding properties in the Cordova configuration file to enable using content hosted in the site inside a Cordova application.\r\n\r\n**Typical manifest** \r\n<pre>\r\n{\r\n  \"lang\": \"en\",\r\n  \"name\": \"Super Racer 2000\",\r\n  \"short_name\": \"Racer2K\",\r\n  \"icons\": [{\r\n        \"src\": \"icon/lowres\",\r\n        \"sizes\": \"64x64\",\r\n        \"type\": \"image/webp\"\r\n      }, {\r\n        \"src\": \"icon/hd_small\",\r\n        \"sizes\": \"64x64\"\r\n      }, {\r\n        \"src\": \"icon/hd_hi\",\r\n        \"sizes\": \"128x128\",\r\n        \"density\": 2\r\n      }],\r\n  \"scope\": \"/\",\r\n  \"start_url\": \"http://www.racer2k.net/start.html\",\r\n  \"display\": \"fullscreen\",\r\n  \"orientation\": \"landscape\",\r\n  \"theme_color\": \"aliceblue\"\r\n}\r\n</pre>\r\n\r\nThe W3C manifest enables the configuration of the application’s name, its starting URL, default orientation, and the icons it uses. In addition, it will update the application’s security policy to control access to external domains. \r\n\r\nWhen the application is launched, the plugin automatically handles navigation to the site’s starting URL.\r\n\r\nLastly, since network connectivity is essential to the operation of a hosted web application, the plugin implements a basic offline feature that will show an offline page whenever connectivity is lost and will prevent users from interacting with the application until the connection is restored.\r\n\r\n## Installation\r\n> **Note:** These are temporary installation steps until the plugin is published to the Cordova registry.\r\n\r\n`cordova plugin add https://github.com/manifoldjs/ManifoldCordova.git`\r\n\r\n> **IMPORTANT:** Before using the plugin, make sure to copy the W3C manifest file to the **root** folder of the Cordova application, alongside **config.xml**, and name it **manifest.json**.\r\n\r\n## Design\r\nThe plugin behavior is mostly implemented at build time by mapping properties in the W3C manifest to standard Cordova settings defined in the **config.xml** file. \r\n\r\nThis mapping process is handled by a hook that executes during the **before_prepare** stage of the Cordova build process. The hook updates the **config.xml** file with values obtained from the manifest. \r\n\r\nThe plugin hook also handles downloading any icons that are specified in the manifest and copies them to the application’s directory, using their dimensions, and possibly their pixel density, to classify them as either an icon or a splash screen, as well as determining the platform for which they are suitable (e.g. iOS, Android, Windows, etc.). It uses this information to configure the corresponding icon and splash elements for each supported platform.\r\n\r\n## Getting Started\r\n\r\nThe following tutorial requires you to install the [Cordova Command-Line Inteface](http://cordova.apache.org/docs/en/4.0.0/guide_cli_index.md.html#The%20Command-Line%20Interface).\r\n\r\n### Hosting a Web Application\r\nThe plugin enables using content hosted in a web site inside a Cordova application by providing a manifest that describes the site.\r\n\r\n1. Create a new Cordova application.  \r\n\t`cordova create sampleapp yourdomain.sampleapp SampleHostedApp`\r\n\r\n1. Go to the **sampleapp** directory created by the previous command.\r\n\r\n1. Download or create a [W3C manifest](http://www.w3.org/2008/webapps/manifest/) describing the website to be hosted by the Cordova application and copy this file to its **root** folder, alongside **config.xml**. If necessary, rename the file as **manifest.json**.\r\n\r\n\t> **Note:** You can find a sample manifest file at the start of this document. \r\n \r\n1. Add the **Hosted Web Application** plugin to the project.  \r\n\t`cordova plugin add https://github.com/manifoldjs/ManifoldCordova.git`\r\n\r\n\t> **Note:** These are temporary installation steps until the plugin is published to the Cordova registry.\r\n\r\n1. Add one or more platforms, for example, to support Android.  \r\n\t`cordova platform add android`\r\n\r\n1. Build the application.  \r\n\t`cordova build`\r\n\r\n1. Launch the application in the emulator for one of the supported platforms. For example:  \r\n\t`cordova emulate android`\r\n\r\n\t> **Note:** The plugin updates the Cordova configuration file (config.xml) with the information in the W3C manifest. If the information in the manifest changes, you can reapply the updated manifest settings at any time by executing prepare. For example:  \r\n\t`cordova prepare`\r\n\r\n### Offline Feature\r\nThe plugin implements a basic offline feature that will show an offline page whenever network connectivity is lost. By default, the page shows a suitable message alerting the user about the loss of connectivity. To customize the offline experience, a page named **offline.html** can be placed in the **www** folder of the application and it will be used instead.\r\n\r\n1. To test the offline feature, interrupt the network connection to show the offline page and reconnect it to hide it. \r\n\r\n\t> **Note:** The procedure for setting offline mode varies depending on whether you are testing on an actual device or an emulator. In devices, you can simply set the device to airplane mode. In the case of simulators there is no single method. For example, in [Ripple](http://ripple.incubator.apache.org/), you can simulate a network disconnection by setting the Connection Type to 'none' under Network Status. On the other hand, for the iOS Simulator, you may need to physically disconnect the network cable or turn off the WiFi connection of the host machine.\r\n\r\n1. Optionally, replace the default offline UI by adding a new page with the content to be shown while in offline mode. Name the page **offline.html** and place it in the **www** folder of the project.\r\n\r\n### Icons and Splash Screens\r\nThe plugin uses any icons specified in the W3C manifest to configure the Cordova application. However, specifying icons in the manifest is not mandatory. If the W3C manifest does not specify any, the application will continue to use the default Cordova icon set or you can enter icon and splash elements manually in the **config.xml** file and they will be used instead. However, be aware that the plugin does replace any such elements if it finds an icon in the manifest that matches its size. Typically, manifest entries reference icons hosted by the target site itself and should reference suitable icons for each platform supported by the application, as described in the [W3C spec](http://www.w3.org/2008/webapps/manifest/#icon-object-and-its-members). The plugin takes care of downloading the corresponding files and copies them to the correct locations in the project.\r\n\r\nWhen you run **cordova prepare**, the plugin will download from the hosted site all image assets in the manifest, if they are available, and it will store them inside the Cordova project using their relative paths as specified in the manifest. You can add any icons missing from the site or replace any icons that were downloaded by simply copying them to the correct location inside the project always making sure that they match the relative path in the manifest. Once the images are in place, building the project will copy the icons to each platform specific folder at the correct locations.\r\n\r\nFor example, the following manifest references icons from the _/resources_ path of the site, for example, _/resources/android/icons/icon-36-ldpi.png_. The plugin expects the corresponding icon file to be stored in the same path relative to the root of the Cordova project.\r\n\r\n<pre>\r\n{\r\n    \"name\": \"Super Racer 2000\",\r\n    \"short_name\": \"Racer2K\",\r\n    \"icons\": [\r\n        {\r\n            \"src\": \"/resources/android/icons/icon-36-ldpi.png\",\r\n            \"sizes\": \"36x36\"\r\n        },\r\n        {\r\n            \"src\": \"/resources/android/icons/icon-48-mdpi.png\",\r\n            \"sizes\": \"48x48\"\r\n        },\r\n        ...\r\n        {\r\n            \"src\": \"/resources/ios/icons/icon-40-2x.png\",\r\n            \"sizes\": \"80x80\"\r\n        },\r\n        ...\r\n        {\r\n            \"src\": \"/resources/windows/icons/Square44x44Logo.scale-240.png\",\r\n            \"sizes\": \"106x106\"\r\n        },\r\n        ...\r\n    ],\r\n    \"scope\": \"*\",\r\n    \"start_url\": \"http://wat-docs.azurewebsites.net/\",\r\n    \"display\": \"fullscreen\",\r\n    \"orientation\": \"portrait\"\r\n}\r\n</pre>\r\n\r\n### URL Access Rules\r\nFor a hosted web application, the W3C manifest defines a scope that restricts the URLs to which the application can navigate. Additionally, the manifest can include a proprietary setting named **mjs_urlAccess** that defines an array of access rules, each one consisting of a _url_ attribute that identifies the target of the rule and a boolean attribute named _external_ that indicates whether URLs matching the rule should be navigated to by the application or launched in an external browser.\r\n\r\nTypically, Cordova applications define access rules to implement a security policy that controls access to external domains. The access rules must not only allow access to the scope defined by the W3C manifest but also to external content used within the site, for example, to reference script files hosted by a  CDN origin. It must also handle any URLs that should be launched externally. \r\n\r\nTo configure the security policy, the plugin hook maps the scope and URL access rules in the W3C manifest (**manifest.json**) to suitable access elements in the Cordova configuration file (**config.xml**). For example:\r\n\r\n**Manifest.json**\r\n<pre>\r\n...\r\n   \"scope\":  \"http://www.xyz.com/\", \r\n   \"mjs_urlAccess\":  [ \r\n     { \"url\": \"http//googleapis.com/*\" },\r\n     { \"url\": \"http//wat.codeplex.com/\", \"external\": true }\r\n   ]\r\n...\r\n</pre>\r\n\r\n**Config.xml**\r\n<pre>\r\n...\r\n&lt;access origin=\"http://www.xyz.com/*\" /&gt;\r\n&lt;access origin=\"http://googleapis.com/*\" /&gt; \r\n&lt;access origin=\"http://wat.codeplex.com/\" launch-external=\"yes\" /&gt;\r\n...\r\n</pre>\r\n\r\n## Methods\r\nEven though the following methods are available, it should be pointed out that calling them is not required as the plugin will provide most of its functionality by simply embedding a W3C manifest in the application package.\r\n\r\n### loadManifest\r\nLoads the specified W3C manifest.\r\n \r\n`hostedwebapp.loadManifest(successCallback, errorCallback, manifestFileName)`\r\n  \r\n|**Parameter**     |**Description**                                                            |\r\n|:-----------------|:--------------------------------------------------------------------------|\r\n|_successCallback_ |A callback that is passed a manifest object.                               |\r\n|_errorCallback_   |A callback that executes if an error occurs when loading the manifest file.|\r\n|_manifestFileName_|The name of the manifest file to load.                                     |\r\n\r\n### getManifest\r\nReturns the currently loaded manifest.\r\n\r\n`hostedwebapp.getManifest(successCallback, errorCallback)`\r\n\r\n|**Parameter**     |**Description**                                                            |\r\n|:-----------------|:--------------------------------------------------------------------------|\r\n|_successCallback_ |A callback that is passed a manifest object.                               |\r\n|_errorCallback_   |A callback that executes if a manifest is not currently available.         |\r\n\r\n### enableOfflinePage\r\nEnables offline page support.\r\n\r\n`hostedwebapp.enableOfflinePage()`\r\n\r\n### disableOfflinePage\r\nDisables offline page support.\r\n\r\n`hostedwebapp.disableOfflinePage()`\r\n\r\n## Supported Platforms\r\nWindows 8.1  \r\nWindows Phone 8.1  \r\niOS  \r\nAndroid  \r\n",
  "readmeFilename": "readme.md",
  "_id": "ManifoldCordova@0.0.4",
  "_shasum": "c3a4ca363829d05da823a35c10478a7bf1786b15",
  "_resolved": "git://github.com/manifoldjs/ManifoldCordova.git#a2446adb02ebf4cfb25309288c1742c6f394c439",
  "_from": "ManifoldCordova@git://github.com/manifoldjs/ManifoldCordova.git"
}
